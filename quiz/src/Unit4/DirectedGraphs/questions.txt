1.
Question 1
Shortest directed cycle. Given a digraph GG, design an efficient algorithm to find a directed cycle with the minimum number of edges (or report that the graph is acyclic). The running time of your algorithm should be at most proportional to V(E + V)V(E+V) and use space proportional to E + VE+V, where VV is the number of vertices and EE is the number of edges.

Hint: run BFS from each vertex.


2.
Question 2
Hamiltonian path in a DAG. Given a directed acyclic graph, design a linear-time algorithm to determine whether it has a Hamiltonian path (a simple path that visits every vertex), and if so, find one.

Hint: topological sort.


3.
Question 3
Reachable vertex.

DAG: Design a linear-time algorithm to determine whether a DAG has a vertex that is reachable from every other vertex, and if so, find one.
Digraph: Design a linear-time algorithm to determine whether a digraph has a vertex that is reachable from every other vertex, and if so, find one.

Hint (DAG): compute the outdegree of each vertex.

Hint (digraph): compute the strong components and look at the kernel DAG (the digraph that results when you contract each strong component to a single vertex).